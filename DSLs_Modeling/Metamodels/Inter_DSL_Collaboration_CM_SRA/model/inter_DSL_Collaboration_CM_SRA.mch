
/*
 * This file was generated by Meeduse on Thursday, March 2, 2023 at 10:52:01 AM CET
 */


MACHINE 
	
	inter_DSL_Collaboration_CM_SRA

DEFINITIONS
	


	END_OF_GENERATED_DEFINITIONS_FOR == inter_DSL_Collaboration_CM_SRA;
	
	/*
	 * Start of user code DEFINITIONS (NOT GENERATED)
	 */
	/*
	 * End of user code
	 */
	
	

SETS
	
	SRA_AS;
	THREAT;
	DEFENSE;
	ENTRY;
	COMPOSITION_AS;
	SECURECONFIGURATION;
	CONFIGURATION;
	INFRASTRUCTURE;
	COMMUNICATION;
	APPLICATION;
	ACTION;
	OPTIMISATIONALGO;
	CM_AS

VARIABLES
	
	SRA,
	Threat,
	Defense,
	Entry,
	COMPOSITION,
	SecureConfiguration,
	Configuration,
	Infrastructure,
	Communication,
	Application,
	Action,
	OptimisationAlgo,
	CM,
	AND,
	
	/*
	 * Renamed class (alias for sRA_DSL::OR)
	 */
	Or,
	NOT,
	threats,
	defenses,
	compDefenses,
	subThreats,
	defs,
	thrs,
	entry,
	entryAnd,
	entryOr,
	entryNot,
	sra,
	cm,
	validConfig,
	validDefenses,
	secureConfigs,
	communications,
	infr,
	actions,
	opt_algo,
	app,
	infrastructures,
	configurations,
	applications,
	selectedConf,
	nameSRAM,
	nameTh,
	nameDef,
	costDef,
	nameSecConf,
	isValidSecConf,
	maxQoS,
	relativeCost,
	nameConf,
	QoS,
	isValid,
	nameInf,
	nameApp,
	nameCMM

INVARIANT
	
	/*
	 * Start of user code INVARIANT (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	
	SRA : FIN(SRA_AS) &
	Threat : FIN(THREAT) &
	Defense : FIN(DEFENSE) &
	Entry : FIN(ENTRY) &
	COMPOSITION : FIN(COMPOSITION_AS) &
	SecureConfiguration : FIN(SECURECONFIGURATION) &
	Configuration : FIN(CONFIGURATION) &
	Infrastructure : FIN(INFRASTRUCTURE) &
	Communication : FIN(COMMUNICATION) &
	Application : FIN(APPLICATION) &
	Action : FIN(ACTION) &
	OptimisationAlgo : FIN(OPTIMISATIONALGO) &
	CM : FIN(CM_AS) &
	AND <: Entry &
	Or <: Entry &
	NOT <: Entry &
	threats : Threat +-> SRA &
	defenses : Defense +-> SRA &
	compDefenses : SRA <-> Defense &
	subThreats : SRA <-> Threat &
	defs : Entry <-> Defense &
	thrs : Entry <-> Threat &
	entry : SRA >+> Entry &
	entryAnd : Entry +-> AND &
	entryOr : Entry +-> Or &
	entryNot : NOT >+> Entry &
	sra : COMPOSITION --> SRA &
	cm : COMPOSITION --> CM &
	validConfig : SecureConfiguration --> Configuration &
	validDefenses : SecureConfiguration <-> Defense &
	secureConfigs : SecureConfiguration +-> COMPOSITION &
	communications : Infrastructure <-> Communication &
	infr : Configuration --> Infrastructure &
	actions : Application <-> Action &
	opt_algo : Application +-> OptimisationAlgo &
	app : Configuration --> Application &
	infrastructures : Infrastructure +-> CM &
	configurations : Configuration +-> CM &
	applications : Application +-> CM &
	selectedConf : CM +-> Configuration &
	nameSRAM : SRA --> STRING &
	nameTh : Threat --> STRING &
	nameDef : Defense --> STRING &
	costDef : Defense --> REAL &
	nameSecConf : SecureConfiguration --> STRING &
	isValidSecConf : SecureConfiguration --> BOOL &
	maxQoS : SecureConfiguration --> REAL &
	relativeCost : SecureConfiguration --> REAL &
	nameConf : Configuration --> STRING &
	QoS : Configuration --> REAL &
	isValid : Configuration --> BOOL &
	nameInf : Infrastructure --> STRING &
	nameApp : Application --> STRING &
	nameCMM : CM --> STRING &
	AND /\ Or = {} &
	AND /\ NOT = {} &
	Or /\ NOT = {}

INITIALISATION
	
	SRA := {} ||
	Threat := {} ||
	Defense := {} ||
	Entry := {} ||
	COMPOSITION := {} ||
	SecureConfiguration := {} ||
	Configuration := {} ||
	Infrastructure := {} ||
	Communication := {} ||
	Application := {} ||
	Action := {} ||
	OptimisationAlgo := {} ||
	CM := {} ||
	AND := {} ||
	Or := {} ||
	NOT := {} ||
	threats := {} ||
	defenses := {} ||
	compDefenses := {} ||
	subThreats := {} ||
	defs := {} ||
	thrs := {} ||
	entry := {} ||
	entryAnd := {} ||
	entryOr := {} ||
	entryNot := {} ||
	sra := {} ||
	cm := {} ||
	validConfig := {} ||
	validDefenses := {} ||
	secureConfigs := {} ||
	communications := {} ||
	infr := {} ||
	actions := {} ||
	opt_algo := {} ||
	app := {} ||
	infrastructures := {} ||
	configurations := {} ||
	applications := {} ||
	selectedConf := {} ||
	nameSRAM := {} ||
	nameTh := {} ||
	nameDef := {} ||
	costDef := {} ||
	nameSecConf := {} ||
	isValidSecConf := {} ||
	maxQoS := {} ||
	relativeCost := {} ||
	nameConf := {} ||
	QoS := {} ||
	isValid := {} ||
	nameInf := {} ||
	nameApp := {} ||
	nameCMM := {}

OPERATIONS
	
	/*
	 * Start of user code OPERATIONS (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	
	selectThreat(aSRA) = 
	PRE	aSRA : SRA
		
	THEN 
		skip
	END;

	computeDefenses(aSRA) = 
	PRE	aSRA : SRA
		
	THEN 
		skip
	END;

	initSRA(aSRA) = 
	PRE	aSRA : SRA
		
	THEN 
		skip
	END;

	createSecureConfig(aSecureConfiguration) = 
	PRE	aSecureConfiguration : SecureConfiguration
		
	THEN 
		skip
	END;

	affectValidDefenses(aSecureConfiguration) = 
	PRE	aSecureConfiguration : SecureConfiguration
		
	THEN 
		skip
	END;

	approveSecureConfig(aSecureConfiguration) = 
	PRE	aSecureConfiguration : SecureConfiguration
		
	THEN 
		skip
	END;

	result <-- validateConfig(aConfiguration) = 
	PRE	aConfiguration : Configuration
		
	THEN 
		/* 
		 * body [Defined in Operation inter_DSL_Collaboration_CM_SRA::cM_DSL::Configuration::validateConfig]
		 */
		result := aConfiguration
	END;

	setQoS(aConfiguration) = 
	PRE	aConfiguration : Configuration
		
	THEN 
		skip
	END;

	selectConfig(aCM) = 
	PRE	aCM : CM
		
	THEN 
		skip
	END;

	SRA_NEW(aSRA,aNameSRAM) = 
	PRE	aSRA : SRA_AS &
		aNameSRAM : STRING &
		aSRA /: SRA
		
	THEN 
		SRA := SRA \/ {aSRA} ||
		nameSRAM := nameSRAM \/ {(aSRA |-> aNameSRAM)}
	END;

	Threat_NEW(aThreat,aNameTh) = 
	PRE	aThreat : THREAT &
		aNameTh : STRING &
		aThreat /: Threat
		
	THEN 
		Threat := Threat \/ {aThreat} ||
		nameTh := nameTh \/ {(aThreat |-> aNameTh)}
	END;

	Defense_NEW(aDefense,aNameDef,aCostDef) = 
	PRE	aDefense : DEFENSE &
		aNameDef : STRING &
		aCostDef : REAL &
		aDefense /: Defense
		
	THEN 
		Defense := Defense \/ {aDefense} ||
		nameDef := nameDef \/ {(aDefense |-> aNameDef)} ||
		costDef := costDef \/ {(aDefense |-> aCostDef)}
	END;

	COMPOSITION_NEW(aCOMPOSITION,aSra,aCm) = 
	PRE	aCOMPOSITION : COMPOSITION_AS &
		aSra : SRA &
		aCm : CM &
		aCOMPOSITION /: COMPOSITION
		
	THEN 
		COMPOSITION := COMPOSITION \/ {aCOMPOSITION} ||
		sra := sra \/ {(aCOMPOSITION |-> aSra)} ||
		cm := cm \/ {(aCOMPOSITION |-> aCm)}
	END;

	SecureConfiguration_NEW(aSecureConfiguration,aValidConfig,aNameSecConf,aIsValidSecConf) = 
	PRE	aSecureConfiguration : SECURECONFIGURATION &
		aValidConfig : Configuration &
		aNameSecConf : STRING &
		aIsValidSecConf : BOOL &
		aSecureConfiguration /: SecureConfiguration
		
	THEN 
		SecureConfiguration := SecureConfiguration \/ {aSecureConfiguration} ||
		validConfig := validConfig \/ {(aSecureConfiguration |-> aValidConfig)} ||
		nameSecConf := nameSecConf \/ {(aSecureConfiguration |-> aNameSecConf)} ||
		isValidSecConf := isValidSecConf \/ {(aSecureConfiguration |-> aIsValidSecConf)} ||
		maxQoS := maxQoS \/ {(aSecureConfiguration |-> 2.0)} ||
		relativeCost := relativeCost \/ {(aSecureConfiguration |-> 0.3)}
	END;

	Configuration_NEW(aConfiguration,aInfr,aApp,aNameConf,aQoS,aIsValid) = 
	PRE	aConfiguration : CONFIGURATION &
		aInfr : Infrastructure &
		aApp : Application &
		aNameConf : STRING &
		aQoS : REAL &
		aIsValid : BOOL &
		aConfiguration /: Configuration
		
	THEN 
		Configuration := Configuration \/ {aConfiguration} ||
		infr := infr \/ {(aConfiguration |-> aInfr)} ||
		app := app \/ {(aConfiguration |-> aApp)} ||
		nameConf := nameConf \/ {(aConfiguration |-> aNameConf)} ||
		QoS := QoS \/ {(aConfiguration |-> aQoS)} ||
		isValid := isValid \/ {(aConfiguration |-> aIsValid)}
	END;

	Infrastructure_NEW(aInfrastructure,aNameInf) = 
	PRE	aInfrastructure : INFRASTRUCTURE &
		aNameInf : STRING &
		aInfrastructure /: Infrastructure
		
	THEN 
		Infrastructure := Infrastructure \/ {aInfrastructure} ||
		nameInf := nameInf \/ {(aInfrastructure |-> aNameInf)}
	END;

	Communication_NEW(aCommunication) = 
	PRE	aCommunication : COMMUNICATION &
		aCommunication /: Communication
		
	THEN 
		Communication := Communication \/ {aCommunication}
	END;

	Application_NEW(aApplication,aNameApp) = 
	PRE	aApplication : APPLICATION &
		aNameApp : STRING &
		aApplication /: Application
		
	THEN 
		Application := Application \/ {aApplication} ||
		nameApp := nameApp \/ {(aApplication |-> aNameApp)}
	END;

	Action_NEW(aAction) = 
	PRE	aAction : ACTION &
		aAction /: Action
		
	THEN 
		Action := Action \/ {aAction}
	END;

	OptimisationAlgo_NEW(aOptimisationAlgo) = 
	PRE	aOptimisationAlgo : OPTIMISATIONALGO &
		aOptimisationAlgo /: OptimisationAlgo
		
	THEN 
		OptimisationAlgo := OptimisationAlgo \/ {aOptimisationAlgo}
	END;

	CM_NEW(aCM,aNameCMM) = 
	PRE	aCM : CM_AS &
		aNameCMM : STRING &
		aCM /: CM
		
	THEN 
		CM := CM \/ {aCM} ||
		nameCMM := nameCMM \/ {(aCM |-> aNameCMM)}
	END;

	AND_NEW(aAND) = 
	PRE	aAND : ENTRY &
		aAND /: Entry
		
	THEN 
		AND := AND \/ {aAND} ||
		Entry := Entry \/ {aAND}
	END;

	Or_NEW(aOr) = 
	PRE	aOr : ENTRY &
		aOr /: Entry
		
	THEN 
		Or := Or \/ {aOr} ||
		Entry := Entry \/ {aOr}
	END;

	NOT_NEW(aNOT) = 
	PRE	aNOT : ENTRY &
		aNOT /: Entry
		
	THEN 
		NOT := NOT \/ {aNOT} ||
		Entry := Entry \/ {aNOT}
	END;

	SRA_Free(aSRA) = 
	PRE	aSRA : SRA &
		sra~[{aSRA}] = {}
		
	THEN 
		SRA := SRA - {aSRA} ||
		threats := threats |>> {aSRA} ||
		defenses := defenses |>> {aSRA} ||
		compDefenses := {aSRA} <<| compDefenses ||
		subThreats := {aSRA} <<| subThreats ||
		entry := {aSRA} <<| entry ||
		sra := sra |>> {aSRA} ||
		nameSRAM := {aSRA} <<| nameSRAM
	END;

	Threat_Free(aThreat) = 
	PRE	aThreat : Threat
		
	THEN 
		Threat := Threat - {aThreat} ||
		threats := {aThreat} <<| threats ||
		subThreats := subThreats |>> {aThreat} ||
		thrs := thrs |>> {aThreat} ||
		nameTh := {aThreat} <<| nameTh
	END;

	Defense_Free(aDefense) = 
	PRE	aDefense : Defense
		
	THEN 
		Defense := Defense - {aDefense} ||
		defenses := {aDefense} <<| defenses ||
		compDefenses := compDefenses |>> {aDefense} ||
		defs := defs |>> {aDefense} ||
		validDefenses := validDefenses |>> {aDefense} ||
		nameDef := {aDefense} <<| nameDef ||
		costDef := {aDefense} <<| costDef
	END;

	COMPOSITION_Free(aCOMPOSITION) = 
	PRE	aCOMPOSITION : COMPOSITION
		
	THEN 
		COMPOSITION := COMPOSITION - {aCOMPOSITION} ||
		sra := {aCOMPOSITION} <<| sra ||
		cm := {aCOMPOSITION} <<| cm ||
		secureConfigs := secureConfigs |>> {aCOMPOSITION}
	END;

	SecureConfiguration_Free(aSecureConfiguration) = 
	PRE	aSecureConfiguration : SecureConfiguration
		
	THEN 
		SecureConfiguration := SecureConfiguration - {aSecureConfiguration} ||
		validConfig := {aSecureConfiguration} <<| validConfig ||
		validDefenses := {aSecureConfiguration} <<| validDefenses ||
		secureConfigs := {aSecureConfiguration} <<| secureConfigs ||
		nameSecConf := {aSecureConfiguration} <<| nameSecConf ||
		isValidSecConf := {aSecureConfiguration} <<| isValidSecConf ||
		maxQoS := {aSecureConfiguration} <<| maxQoS ||
		relativeCost := {aSecureConfiguration} <<| relativeCost
	END;

	Configuration_Free(aConfiguration) = 
	PRE	aConfiguration : Configuration &
		validConfig~[{aConfiguration}] = {}
		
	THEN 
		Configuration := Configuration - {aConfiguration} ||
		validConfig := validConfig |>> {aConfiguration} ||
		infr := {aConfiguration} <<| infr ||
		app := {aConfiguration} <<| app ||
		configurations := {aConfiguration} <<| configurations ||
		selectedConf := selectedConf |>> {aConfiguration} ||
		nameConf := {aConfiguration} <<| nameConf ||
		QoS := {aConfiguration} <<| QoS ||
		isValid := {aConfiguration} <<| isValid
	END;

	Infrastructure_Free(aInfrastructure) = 
	PRE	aInfrastructure : Infrastructure &
		infr~[{aInfrastructure}] = {}
		
	THEN 
		Infrastructure := Infrastructure - {aInfrastructure} ||
		communications := {aInfrastructure} <<| communications ||
		infr := infr |>> {aInfrastructure} ||
		infrastructures := {aInfrastructure} <<| infrastructures ||
		nameInf := {aInfrastructure} <<| nameInf
	END;

	Communication_Free(aCommunication) = 
	PRE	aCommunication : Communication
		
	THEN 
		Communication := Communication - {aCommunication} ||
		communications := communications |>> {aCommunication}
	END;

	Application_Free(aApplication) = 
	PRE	aApplication : Application &
		app~[{aApplication}] = {}
		
	THEN 
		Application := Application - {aApplication} ||
		actions := {aApplication} <<| actions ||
		opt_algo := {aApplication} <<| opt_algo ||
		app := app |>> {aApplication} ||
		applications := {aApplication} <<| applications ||
		nameApp := {aApplication} <<| nameApp
	END;

	Action_Free(aAction) = 
	PRE	aAction : Action
		
	THEN 
		Action := Action - {aAction} ||
		actions := actions |>> {aAction}
	END;

	OptimisationAlgo_Free(aOptimisationAlgo) = 
	PRE	aOptimisationAlgo : OptimisationAlgo
		
	THEN 
		OptimisationAlgo := OptimisationAlgo - {aOptimisationAlgo} ||
		opt_algo := opt_algo |>> {aOptimisationAlgo}
	END;

	CM_Free(aCM) = 
	PRE	aCM : CM &
		cm~[{aCM}] = {}
		
	THEN 
		CM := CM - {aCM} ||
		cm := cm |>> {aCM} ||
		infrastructures := infrastructures |>> {aCM} ||
		configurations := configurations |>> {aCM} ||
		applications := applications |>> {aCM} ||
		selectedConf := {aCM} <<| selectedConf ||
		nameCMM := {aCM} <<| nameCMM
	END;

	AND_Free(aAND) = 
	PRE	aAND : AND
		
	THEN 
		AND := AND - {aAND} ||
		Entry := Entry - {aAND} ||
		defs := {aAND} <<| defs ||
		thrs := {aAND} <<| thrs ||
		entry := entry |>> {aAND} ||
		entryAnd := ({aAND} <<| entryAnd) |>> {aAND} ||
		entryOr := {aAND} <<| entryOr ||
		entryNot := entryNot |>> {aAND}
	END;

	Or_Free(aOr) = 
	PRE	aOr : Or
		
	THEN 
		Or := Or - {aOr} ||
		Entry := Entry - {aOr} ||
		defs := {aOr} <<| defs ||
		thrs := {aOr} <<| thrs ||
		entry := entry |>> {aOr} ||
		entryAnd := {aOr} <<| entryAnd ||
		entryOr := ({aOr} <<| entryOr) |>> {aOr} ||
		entryNot := entryNot |>> {aOr}
	END;

	NOT_Free(aNOT) = 
	PRE	aNOT : NOT
		
	THEN 
		NOT := NOT - {aNOT} ||
		Entry := Entry - {aNOT} ||
		defs := {aNOT} <<| defs ||
		thrs := {aNOT} <<| thrs ||
		entry := entry |>> {aNOT} ||
		entryAnd := {aNOT} <<| entryAnd ||
		entryOr := {aNOT} <<| entryOr ||
		entryNot := {aNOT} <<| (entryNot |>> {aNOT})
	END;

	result <-- GetThreats(aSRA) = 
	PRE	aSRA : SRA &
		aSRA : ran(threats)
		
	THEN 
		result := threats~[{aSRA}]
	END;

	result <-- GetDefenses(aSRA) = 
	PRE	aSRA : SRA &
		aSRA : ran(defenses)
		
	THEN 
		result := defenses~[{aSRA}]
	END;

	result <-- GetCompDefenses(aSRA) = 
	PRE	aSRA : SRA &
		aSRA : dom(compDefenses)
		
	THEN 
		result := compDefenses[{aSRA}]
	END;

	result <-- GetSubThreats(aSRA) = 
	PRE	aSRA : SRA &
		aSRA : dom(subThreats)
		
	THEN 
		result := subThreats[{aSRA}]
	END;

	result <-- GetEntry(aSRA) = 
	PRE	aSRA : SRA &
		aSRA : dom(entry)
		
	THEN 
		result := entry(aSRA)
	END;

	result <-- GetDefs(aEntry) = 
	PRE	aEntry : Entry &
		aEntry : dom(defs)
		
	THEN 
		result := defs[{aEntry}]
	END;

	result <-- GetThrs(aEntry) = 
	PRE	aEntry : Entry &
		aEntry : dom(thrs)
		
	THEN 
		result := thrs[{aEntry}]
	END;

	result <-- GetEntryAnd(aAND) = 
	PRE	aAND : AND &
		aAND : ran(entryAnd)
		
	THEN 
		result := entryAnd~[{aAND}]
	END;

	result <-- GetEntryOr(aOr) = 
	PRE	aOr : Or &
		aOr : ran(entryOr)
		
	THEN 
		result := entryOr~[{aOr}]
	END;

	result <-- GetEntryNot(aNOT) = 
	PRE	aNOT : NOT &
		aNOT : dom(entryNot)
		
	THEN 
		result := entryNot(aNOT)
	END;

	result <-- GetSra(aCOMPOSITION) = 
	PRE	aCOMPOSITION : COMPOSITION &
		aCOMPOSITION : dom(sra)
		
	THEN 
		result := sra(aCOMPOSITION)
	END;

	result <-- GetCm(aCOMPOSITION) = 
	PRE	aCOMPOSITION : COMPOSITION &
		aCOMPOSITION : dom(cm)
		
	THEN 
		result := cm(aCOMPOSITION)
	END;

	result <-- GetSecureConfigs(aCOMPOSITION) = 
	PRE	aCOMPOSITION : COMPOSITION &
		aCOMPOSITION : ran(secureConfigs)
		
	THEN 
		result := secureConfigs~[{aCOMPOSITION}]
	END;

	result <-- GetValidConfig(aSecureConfiguration) = 
	PRE	aSecureConfiguration : SecureConfiguration &
		aSecureConfiguration : dom(validConfig)
		
	THEN 
		result := validConfig(aSecureConfiguration)
	END;

	result <-- GetValidDefenses(aSecureConfiguration) = 
	PRE	aSecureConfiguration : SecureConfiguration &
		aSecureConfiguration : dom(validDefenses)
		
	THEN 
		result := validDefenses[{aSecureConfiguration}]
	END;

	result <-- GetInfr(aConfiguration) = 
	PRE	aConfiguration : Configuration &
		aConfiguration : dom(infr)
		
	THEN 
		result := infr(aConfiguration)
	END;

	result <-- GetApp(aConfiguration) = 
	PRE	aConfiguration : Configuration &
		aConfiguration : dom(app)
		
	THEN 
		result := app(aConfiguration)
	END;

	result <-- GetCommunications(aInfrastructure) = 
	PRE	aInfrastructure : Infrastructure &
		aInfrastructure : dom(communications)
		
	THEN 
		result := communications[{aInfrastructure}]
	END;

	result <-- GetActions(aApplication) = 
	PRE	aApplication : Application &
		aApplication : dom(actions)
		
	THEN 
		result := actions[{aApplication}]
	END;

	result <-- GetOpt_algo(aApplication) = 
	PRE	aApplication : Application &
		aApplication : dom(opt_algo)
		
	THEN 
		result := opt_algo(aApplication)
	END;

	result <-- GetInfrastructures(aCM) = 
	PRE	aCM : CM &
		aCM : ran(infrastructures)
		
	THEN 
		result := infrastructures~[{aCM}]
	END;

	result <-- GetConfigurations(aCM) = 
	PRE	aCM : CM &
		aCM : ran(configurations)
		
	THEN 
		result := configurations~[{aCM}]
	END;

	result <-- GetApplications(aCM) = 
	PRE	aCM : CM &
		aCM : ran(applications)
		
	THEN 
		result := applications~[{aCM}]
	END;

	result <-- GetSelectedConf(aCM) = 
	PRE	aCM : CM &
		aCM : dom(selectedConf)
		
	THEN 
		result := selectedConf(aCM)
	END;

	SetThreats(aSRA,theThreats) = 
	PRE	aSRA : SRA &
		theThreats : FIN(Threat) &
		(theThreats * {aSRA}) /<: threats &
		!added.( added : theThreats => threats[{added}] = {})
		
	THEN 
		threats := (threats |>> {aSRA}) \/ (theThreats * {aSRA})
	END;

	SetDefenses(aSRA,theDefenses) = 
	PRE	aSRA : SRA &
		theDefenses : FIN(Defense) &
		(theDefenses * {aSRA}) /<: defenses &
		!added.( added : theDefenses => defenses[{added}] = {})
		
	THEN 
		defenses := (defenses |>> {aSRA}) \/ (theDefenses * {aSRA})
	END;

	SetCompDefenses(aSRA,theCompDefenses) = 
	PRE	aSRA : SRA &
		theCompDefenses : FIN(Defense) &
		({aSRA} * theCompDefenses) /<: compDefenses
		
	THEN 
		compDefenses := ({aSRA} <<| compDefenses) \/ ({aSRA} * theCompDefenses)
	END;

	SetSubThreats(aSRA,theSubThreats) = 
	PRE	aSRA : SRA &
		theSubThreats : FIN(Threat) &
		({aSRA} * theSubThreats) /<: subThreats
		
	THEN 
		subThreats := ({aSRA} <<| subThreats) \/ ({aSRA} * theSubThreats)
	END;

	SetEntry(aSRA,aEntry) = 
	PRE	aSRA : SRA &
		aEntry : Entry &
		{(aSRA |-> aEntry)} /<: entry &
		entry~[{aEntry}] = {}
		
	THEN 
		entry := ({aSRA} <<| entry) \/ {(aSRA |-> aEntry)}
	END;

	SetDefs(aEntry,theDefs) = 
	PRE	aEntry : Entry &
		theDefs : FIN(Defense) &
		({aEntry} * theDefs) /<: defs
		
	THEN 
		defs := ({aEntry} <<| defs) \/ ({aEntry} * theDefs)
	END;

	SetThrs(aEntry,theThrs) = 
	PRE	aEntry : Entry &
		theThrs : FIN(Threat) &
		({aEntry} * theThrs) /<: thrs
		
	THEN 
		thrs := ({aEntry} <<| thrs) \/ ({aEntry} * theThrs)
	END;

	SetEntryAnd(aAND,theEntryAnd) = 
	PRE	aAND : AND &
		theEntryAnd : FIN(Entry) &
		(theEntryAnd * {aAND}) /<: entryAnd &
		!added.( added : theEntryAnd => entryAnd[{added}] = {})
		
	THEN 
		entryAnd := (entryAnd |>> {aAND}) \/ (theEntryAnd * {aAND})
	END;

	SetEntryOr(aOr,theEntryOr) = 
	PRE	aOr : Or &
		theEntryOr : FIN(Entry) &
		(theEntryOr * {aOr}) /<: entryOr &
		!added.( added : theEntryOr => entryOr[{added}] = {})
		
	THEN 
		entryOr := (entryOr |>> {aOr}) \/ (theEntryOr * {aOr})
	END;

	SetEntryNot(aNOT,aEntryNot) = 
	PRE	aNOT : NOT &
		aEntryNot : Entry &
		{(aNOT |-> aEntryNot)} /<: entryNot &
		entryNot~[{aEntryNot}] = {}
		
	THEN 
		entryNot := ({aNOT} <<| entryNot) \/ {(aNOT |-> aEntryNot)}
	END;

	SetSra(aCOMPOSITION,aSra) = 
	PRE	aCOMPOSITION : COMPOSITION &
		aSra : SRA &
		{(aCOMPOSITION |-> aSra)} /<: sra
		
	THEN 
		sra := ({aCOMPOSITION} <<| sra) \/ {(aCOMPOSITION |-> aSra)}
	END;

	SetCm(aCOMPOSITION,aCm) = 
	PRE	aCOMPOSITION : COMPOSITION &
		aCm : CM &
		{(aCOMPOSITION |-> aCm)} /<: cm
		
	THEN 
		cm := ({aCOMPOSITION} <<| cm) \/ {(aCOMPOSITION |-> aCm)}
	END;

	SetSecureConfigs(aCOMPOSITION,theSecureConfigs) = 
	PRE	aCOMPOSITION : COMPOSITION &
		theSecureConfigs : FIN(SecureConfiguration) &
		(theSecureConfigs * {aCOMPOSITION}) /<: secureConfigs &
		!added.( added : theSecureConfigs => secureConfigs[{added}] = {})
		
	THEN 
		secureConfigs := (secureConfigs |>> {aCOMPOSITION}) \/ (theSecureConfigs * {aCOMPOSITION})
	END;

	SetValidConfig(aSecureConfiguration,aValidConfig) = 
	PRE	aSecureConfiguration : SecureConfiguration &
		aValidConfig : Configuration &
		{(aSecureConfiguration |-> aValidConfig)} /<: validConfig
		
	THEN 
		validConfig := ({aSecureConfiguration} <<| validConfig) \/ {(aSecureConfiguration |-> aValidConfig)}
	END;

	SetValidDefenses(aSecureConfiguration,theValidDefenses) = 
	PRE	aSecureConfiguration : SecureConfiguration &
		theValidDefenses : FIN(Defense) &
		({aSecureConfiguration} * theValidDefenses) /<: validDefenses
		
	THEN 
		validDefenses := ({aSecureConfiguration} <<| validDefenses) \/ ({aSecureConfiguration} * theValidDefenses)
	END;

	SetInfr(aConfiguration,aInfr) = 
	PRE	aConfiguration : Configuration &
		aInfr : Infrastructure &
		{(aConfiguration |-> aInfr)} /<: infr
		
	THEN 
		infr := ({aConfiguration} <<| infr) \/ {(aConfiguration |-> aInfr)}
	END;

	SetApp(aConfiguration,aApp) = 
	PRE	aConfiguration : Configuration &
		aApp : Application &
		{(aConfiguration |-> aApp)} /<: app
		
	THEN 
		app := ({aConfiguration} <<| app) \/ {(aConfiguration |-> aApp)}
	END;

	SetCommunications(aInfrastructure,theCommunications) = 
	PRE	aInfrastructure : Infrastructure &
		theCommunications : FIN(Communication) &
		({aInfrastructure} * theCommunications) /<: communications
		
	THEN 
		communications := ({aInfrastructure} <<| communications) \/ ({aInfrastructure} * theCommunications)
	END;

	SetActions(aApplication,theActions) = 
	PRE	aApplication : Application &
		theActions : FIN(Action) &
		({aApplication} * theActions) /<: actions
		
	THEN 
		actions := ({aApplication} <<| actions) \/ ({aApplication} * theActions)
	END;

	SetOpt_algo(aApplication,aOpt_algo) = 
	PRE	aApplication : Application &
		aOpt_algo : OptimisationAlgo &
		{(aApplication |-> aOpt_algo)} /<: opt_algo
		
	THEN 
		opt_algo := ({aApplication} <<| opt_algo) \/ {(aApplication |-> aOpt_algo)}
	END;

	SetInfrastructures(aCM,theInfrastructures) = 
	PRE	aCM : CM &
		theInfrastructures : FIN(Infrastructure) &
		(theInfrastructures * {aCM}) /<: infrastructures &
		!added.( added : theInfrastructures => infrastructures[{added}] = {})
		
	THEN 
		infrastructures := (infrastructures |>> {aCM}) \/ (theInfrastructures * {aCM})
	END;

	SetConfigurations(aCM,theConfigurations) = 
	PRE	aCM : CM &
		theConfigurations : FIN(Configuration) &
		(theConfigurations * {aCM}) /<: configurations &
		!added.( added : theConfigurations => configurations[{added}] = {})
		
	THEN 
		configurations := (configurations |>> {aCM}) \/ (theConfigurations * {aCM})
	END;

	SetApplications(aCM,theApplications) = 
	PRE	aCM : CM &
		theApplications : FIN(Application) &
		(theApplications * {aCM}) /<: applications &
		!added.( added : theApplications => applications[{added}] = {})
		
	THEN 
		applications := (applications |>> {aCM}) \/ (theApplications * {aCM})
	END;

	SetSelectedConf(aCM,aSelectedConf) = 
	PRE	aCM : CM &
		aSelectedConf : Configuration &
		{(aCM |-> aSelectedConf)} /<: selectedConf
		
	THEN 
		selectedConf := ({aCM} <<| selectedConf) \/ {(aCM |-> aSelectedConf)}
	END;

	UnsetThreats(aSRA) = 
	PRE	aSRA : SRA
		
	THEN 
		threats := threats |>> {aSRA}
	END;

	UnsetDefenses(aSRA) = 
	PRE	aSRA : SRA
		
	THEN 
		defenses := defenses |>> {aSRA}
	END;

	UnsetCompDefenses(aSRA) = 
	PRE	aSRA : SRA
		
	THEN 
		compDefenses := {aSRA} <<| compDefenses
	END;

	UnsetSubThreats(aSRA) = 
	PRE	aSRA : SRA
		
	THEN 
		subThreats := {aSRA} <<| subThreats
	END;

	UnsetEntry(aSRA) = 
	PRE	aSRA : SRA
		
	THEN 
		entry := {aSRA} <<| entry
	END;

	UnsetDefs(aEntry) = 
	PRE	aEntry : Entry
		
	THEN 
		defs := {aEntry} <<| defs
	END;

	UnsetThrs(aEntry) = 
	PRE	aEntry : Entry
		
	THEN 
		thrs := {aEntry} <<| thrs
	END;

	UnsetEntryAnd(aAND) = 
	PRE	aAND : AND
		
	THEN 
		entryAnd := entryAnd |>> {aAND}
	END;

	UnsetEntryOr(aOr) = 
	PRE	aOr : Or
		
	THEN 
		entryOr := entryOr |>> {aOr}
	END;

	UnsetEntryNot(aNOT) = 
	PRE	aNOT : NOT
		
	THEN 
		entryNot := {aNOT} <<| entryNot
	END;

	UnsetSecureConfigs(aCOMPOSITION) = 
	PRE	aCOMPOSITION : COMPOSITION
		
	THEN 
		secureConfigs := secureConfigs |>> {aCOMPOSITION}
	END;

	UnsetValidDefenses(aSecureConfiguration) = 
	PRE	aSecureConfiguration : SecureConfiguration
		
	THEN 
		validDefenses := {aSecureConfiguration} <<| validDefenses
	END;

	UnsetCommunications(aInfrastructure) = 
	PRE	aInfrastructure : Infrastructure
		
	THEN 
		communications := {aInfrastructure} <<| communications
	END;

	UnsetActions(aApplication) = 
	PRE	aApplication : Application
		
	THEN 
		actions := {aApplication} <<| actions
	END;

	UnsetOpt_algo(aApplication) = 
	PRE	aApplication : Application
		
	THEN 
		opt_algo := {aApplication} <<| opt_algo
	END;

	UnsetInfrastructures(aCM) = 
	PRE	aCM : CM
		
	THEN 
		infrastructures := infrastructures |>> {aCM}
	END;

	UnsetConfigurations(aCM) = 
	PRE	aCM : CM
		
	THEN 
		configurations := configurations |>> {aCM}
	END;

	UnsetApplications(aCM) = 
	PRE	aCM : CM
		
	THEN 
		applications := applications |>> {aCM}
	END;

	UnsetSelectedConf(aCM) = 
	PRE	aCM : CM
		
	THEN 
		selectedConf := {aCM} <<| selectedConf
	END;

	AddThreats(aSRA,aThreats) = 
	PRE	aSRA : SRA &
		aThreats : Threat &
		(aThreats |-> aSRA) /: threats &
		threats[{aThreats}] = {}
		
	THEN 
		threats := threats \/ {(aThreats |-> aSRA)}
	END;

	AddDefenses(aSRA,aDefenses) = 
	PRE	aSRA : SRA &
		aDefenses : Defense &
		(aDefenses |-> aSRA) /: defenses &
		defenses[{aDefenses}] = {}
		
	THEN 
		defenses := defenses \/ {(aDefenses |-> aSRA)}
	END;

	AddCompDefenses(aSRA,aCompDefenses) = 
	PRE	aSRA : SRA &
		aCompDefenses : Defense &
		(aSRA |-> aCompDefenses) /: compDefenses
		
	THEN 
		compDefenses := compDefenses \/ {(aSRA |-> aCompDefenses)}
	END;

	AddSubThreats(aSRA,aSubThreats) = 
	PRE	aSRA : SRA &
		aSubThreats : Threat &
		(aSRA |-> aSubThreats) /: subThreats
		
	THEN 
		subThreats := subThreats \/ {(aSRA |-> aSubThreats)}
	END;

	AddDefs(aEntry,aDefs) = 
	PRE	aEntry : Entry &
		aDefs : Defense &
		(aEntry |-> aDefs) /: defs
		
	THEN 
		defs := defs \/ {(aEntry |-> aDefs)}
	END;

	AddThrs(aEntry,aThrs) = 
	PRE	aEntry : Entry &
		aThrs : Threat &
		(aEntry |-> aThrs) /: thrs
		
	THEN 
		thrs := thrs \/ {(aEntry |-> aThrs)}
	END;

	AddEntryAnd(aAND,aEntryAnd) = 
	PRE	aAND : AND &
		aEntryAnd : Entry &
		(aEntryAnd |-> aAND) /: entryAnd &
		entryAnd[{aEntryAnd}] = {}
		
	THEN 
		entryAnd := entryAnd \/ {(aEntryAnd |-> aAND)}
	END;

	AddEntryOr(aOr,aEntryOr) = 
	PRE	aOr : Or &
		aEntryOr : Entry &
		(aEntryOr |-> aOr) /: entryOr &
		entryOr[{aEntryOr}] = {}
		
	THEN 
		entryOr := entryOr \/ {(aEntryOr |-> aOr)}
	END;

	AddSecureConfigs(aCOMPOSITION,aSecureConfigs) = 
	PRE	aCOMPOSITION : COMPOSITION &
		aSecureConfigs : SecureConfiguration &
		(aSecureConfigs |-> aCOMPOSITION) /: secureConfigs &
		secureConfigs[{aSecureConfigs}] = {}
		
	THEN 
		secureConfigs := secureConfigs \/ {(aSecureConfigs |-> aCOMPOSITION)}
	END;

	AddValidDefenses(aSecureConfiguration,aValidDefenses) = 
	PRE	aSecureConfiguration : SecureConfiguration &
		aValidDefenses : Defense &
		(aSecureConfiguration |-> aValidDefenses) /: validDefenses
		
	THEN 
		validDefenses := validDefenses \/ {(aSecureConfiguration |-> aValidDefenses)}
	END;

	AddCommunications(aInfrastructure,aCommunications) = 
	PRE	aInfrastructure : Infrastructure &
		aCommunications : Communication &
		(aInfrastructure |-> aCommunications) /: communications
		
	THEN 
		communications := communications \/ {(aInfrastructure |-> aCommunications)}
	END;

	AddActions(aApplication,aActions) = 
	PRE	aApplication : Application &
		aActions : Action &
		(aApplication |-> aActions) /: actions
		
	THEN 
		actions := actions \/ {(aApplication |-> aActions)}
	END;

	AddInfrastructures(aCM,aInfrastructures) = 
	PRE	aCM : CM &
		aInfrastructures : Infrastructure &
		(aInfrastructures |-> aCM) /: infrastructures &
		infrastructures[{aInfrastructures}] = {}
		
	THEN 
		infrastructures := infrastructures \/ {(aInfrastructures |-> aCM)}
	END;

	AddConfigurations(aCM,aConfigurations) = 
	PRE	aCM : CM &
		aConfigurations : Configuration &
		(aConfigurations |-> aCM) /: configurations &
		configurations[{aConfigurations}] = {}
		
	THEN 
		configurations := configurations \/ {(aConfigurations |-> aCM)}
	END;

	AddApplications(aCM,aApplications) = 
	PRE	aCM : CM &
		aApplications : Application &
		(aApplications |-> aCM) /: applications &
		applications[{aApplications}] = {}
		
	THEN 
		applications := applications \/ {(aApplications |-> aCM)}
	END;

	RemoveThreats(aSRA,aThreats) = 
	PRE	aSRA : SRA &
		aThreats : Threat &
		(aThreats |-> aSRA) : threats
		
	THEN 
		threats := threats - {(aThreats |-> aSRA)}
	END;

	RemoveDefenses(aSRA,aDefenses) = 
	PRE	aSRA : SRA &
		aDefenses : Defense &
		(aDefenses |-> aSRA) : defenses
		
	THEN 
		defenses := defenses - {(aDefenses |-> aSRA)}
	END;

	RemoveCompDefenses(aSRA,aCompDefenses) = 
	PRE	aSRA : SRA &
		aCompDefenses : Defense &
		(aSRA |-> aCompDefenses) : compDefenses
		
	THEN 
		compDefenses := compDefenses - {(aSRA |-> aCompDefenses)}
	END;

	RemoveSubThreats(aSRA,aSubThreats) = 
	PRE	aSRA : SRA &
		aSubThreats : Threat &
		(aSRA |-> aSubThreats) : subThreats
		
	THEN 
		subThreats := subThreats - {(aSRA |-> aSubThreats)}
	END;

	RemoveEntry(aSRA,aEntry) = 
	PRE	aSRA : SRA &
		aEntry : Entry &
		(aSRA |-> aEntry) : entry
		
	THEN 
		entry := entry - {(aSRA |-> aEntry)}
	END;

	RemoveDefs(aEntry,aDefs) = 
	PRE	aEntry : Entry &
		aDefs : Defense &
		(aEntry |-> aDefs) : defs
		
	THEN 
		defs := defs - {(aEntry |-> aDefs)}
	END;

	RemoveThrs(aEntry,aThrs) = 
	PRE	aEntry : Entry &
		aThrs : Threat &
		(aEntry |-> aThrs) : thrs
		
	THEN 
		thrs := thrs - {(aEntry |-> aThrs)}
	END;

	RemoveEntryAnd(aAND,aEntryAnd) = 
	PRE	aAND : AND &
		aEntryAnd : Entry &
		(aEntryAnd |-> aAND) : entryAnd
		
	THEN 
		entryAnd := entryAnd - {(aEntryAnd |-> aAND)}
	END;

	RemoveEntryOr(aOr,aEntryOr) = 
	PRE	aOr : Or &
		aEntryOr : Entry &
		(aEntryOr |-> aOr) : entryOr
		
	THEN 
		entryOr := entryOr - {(aEntryOr |-> aOr)}
	END;

	RemoveEntryNot(aNOT,aEntryNot) = 
	PRE	aNOT : NOT &
		aEntryNot : Entry &
		(aNOT |-> aEntryNot) : entryNot
		
	THEN 
		entryNot := entryNot - {(aNOT |-> aEntryNot)}
	END;

	RemoveSecureConfigs(aCOMPOSITION,aSecureConfigs) = 
	PRE	aCOMPOSITION : COMPOSITION &
		aSecureConfigs : SecureConfiguration &
		(aSecureConfigs |-> aCOMPOSITION) : secureConfigs
		
	THEN 
		secureConfigs := secureConfigs - {(aSecureConfigs |-> aCOMPOSITION)}
	END;

	RemoveValidDefenses(aSecureConfiguration,aValidDefenses) = 
	PRE	aSecureConfiguration : SecureConfiguration &
		aValidDefenses : Defense &
		(aSecureConfiguration |-> aValidDefenses) : validDefenses
		
	THEN 
		validDefenses := validDefenses - {(aSecureConfiguration |-> aValidDefenses)}
	END;

	RemoveCommunications(aInfrastructure,aCommunications) = 
	PRE	aInfrastructure : Infrastructure &
		aCommunications : Communication &
		(aInfrastructure |-> aCommunications) : communications
		
	THEN 
		communications := communications - {(aInfrastructure |-> aCommunications)}
	END;

	RemoveActions(aApplication,aActions) = 
	PRE	aApplication : Application &
		aActions : Action &
		(aApplication |-> aActions) : actions
		
	THEN 
		actions := actions - {(aApplication |-> aActions)}
	END;

	RemoveOpt_algo(aApplication,aOpt_algo) = 
	PRE	aApplication : Application &
		aOpt_algo : OptimisationAlgo &
		(aApplication |-> aOpt_algo) : opt_algo
		
	THEN 
		opt_algo := opt_algo - {(aApplication |-> aOpt_algo)}
	END;

	RemoveInfrastructures(aCM,aInfrastructures) = 
	PRE	aCM : CM &
		aInfrastructures : Infrastructure &
		(aInfrastructures |-> aCM) : infrastructures
		
	THEN 
		infrastructures := infrastructures - {(aInfrastructures |-> aCM)}
	END;

	RemoveConfigurations(aCM,aConfigurations) = 
	PRE	aCM : CM &
		aConfigurations : Configuration &
		(aConfigurations |-> aCM) : configurations
		
	THEN 
		configurations := configurations - {(aConfigurations |-> aCM)}
	END;

	RemoveApplications(aCM,aApplications) = 
	PRE	aCM : CM &
		aApplications : Application &
		(aApplications |-> aCM) : applications
		
	THEN 
		applications := applications - {(aApplications |-> aCM)}
	END;

	RemoveSelectedConf(aCM,aSelectedConf) = 
	PRE	aCM : CM &
		aSelectedConf : Configuration &
		(aCM |-> aSelectedConf) : selectedConf
		
	THEN 
		selectedConf := selectedConf - {(aCM |-> aSelectedConf)}
	END;

	result <-- GetNameSRAM(aSRA) = 
	PRE	aSRA : SRA &
		aSRA : dom(nameSRAM)
		
	THEN 
		result := nameSRAM(aSRA)
	END;

	result <-- GetNameTh(aThreat) = 
	PRE	aThreat : Threat &
		aThreat : dom(nameTh)
		
	THEN 
		result := nameTh(aThreat)
	END;

	result <-- GetNameDef(aDefense) = 
	PRE	aDefense : Defense &
		aDefense : dom(nameDef)
		
	THEN 
		result := nameDef(aDefense)
	END;

	result <-- GetCostDef(aDefense) = 
	PRE	aDefense : Defense &
		aDefense : dom(costDef)
		
	THEN 
		result := costDef(aDefense)
	END;

	result <-- GetNameSecConf(aSecureConfiguration) = 
	PRE	aSecureConfiguration : SecureConfiguration &
		aSecureConfiguration : dom(nameSecConf)
		
	THEN 
		result := nameSecConf(aSecureConfiguration)
	END;

	result <-- GetIsValidSecConf(aSecureConfiguration) = 
	PRE	aSecureConfiguration : SecureConfiguration &
		aSecureConfiguration : dom(isValidSecConf)
		
	THEN 
		result := isValidSecConf(aSecureConfiguration)
	END;

	result <-- GetMaxQoS(aSecureConfiguration) = 
	PRE	aSecureConfiguration : SecureConfiguration &
		aSecureConfiguration : dom(maxQoS)
		
	THEN 
		result := maxQoS(aSecureConfiguration)
	END;

	result <-- GetRelativeCost(aSecureConfiguration) = 
	PRE	aSecureConfiguration : SecureConfiguration &
		aSecureConfiguration : dom(relativeCost)
		
	THEN 
		result := relativeCost(aSecureConfiguration)
	END;

	result <-- GetNameConf(aConfiguration) = 
	PRE	aConfiguration : Configuration &
		aConfiguration : dom(nameConf)
		
	THEN 
		result := nameConf(aConfiguration)
	END;

	result <-- GetQoS(aConfiguration) = 
	PRE	aConfiguration : Configuration &
		aConfiguration : dom(QoS)
		
	THEN 
		result := QoS(aConfiguration)
	END;

	result <-- GetIsValid(aConfiguration) = 
	PRE	aConfiguration : Configuration &
		aConfiguration : dom(isValid)
		
	THEN 
		result := isValid(aConfiguration)
	END;

	result <-- GetNameInf(aInfrastructure) = 
	PRE	aInfrastructure : Infrastructure &
		aInfrastructure : dom(nameInf)
		
	THEN 
		result := nameInf(aInfrastructure)
	END;

	result <-- GetNameApp(aApplication) = 
	PRE	aApplication : Application &
		aApplication : dom(nameApp)
		
	THEN 
		result := nameApp(aApplication)
	END;

	result <-- GetNameCMM(aCM) = 
	PRE	aCM : CM &
		aCM : dom(nameCMM)
		
	THEN 
		result := nameCMM(aCM)
	END;

	SetNameSRAM(aSRA,aNameSRAM) = 
	PRE	aSRA : SRA &
		aNameSRAM : STRING
		
	THEN 
		nameSRAM := ({aSRA} <<| nameSRAM)  \/ {(aSRA |-> aNameSRAM)}
	END;

	SetNameTh(aThreat,aNameTh) = 
	PRE	aThreat : Threat &
		aNameTh : STRING
		
	THEN 
		nameTh := ({aThreat} <<| nameTh)  \/ {(aThreat |-> aNameTh)}
	END;

	SetNameDef(aDefense,aNameDef) = 
	PRE	aDefense : Defense &
		aNameDef : STRING
		
	THEN 
		nameDef := ({aDefense} <<| nameDef)  \/ {(aDefense |-> aNameDef)}
	END;

	SetCostDef(aDefense,aCostDef) = 
	PRE	aDefense : Defense &
		aCostDef : REAL
		
	THEN 
		costDef := ({aDefense} <<| costDef)  \/ {(aDefense |-> aCostDef)}
	END;

	SetNameSecConf(aSecureConfiguration,aNameSecConf) = 
	PRE	aSecureConfiguration : SecureConfiguration &
		aNameSecConf : STRING
		
	THEN 
		nameSecConf := ({aSecureConfiguration} <<| nameSecConf)  \/ {(aSecureConfiguration |-> aNameSecConf)}
	END;

	SetIsValidSecConf(aSecureConfiguration,aIsValidSecConf) = 
	PRE	aSecureConfiguration : SecureConfiguration &
		aIsValidSecConf : BOOL
		
	THEN 
		isValidSecConf := ({aSecureConfiguration} <<| isValidSecConf)  \/ {(aSecureConfiguration |-> aIsValidSecConf)}
	END;

	SetMaxQoS(aSecureConfiguration,aMaxQoS) = 
	PRE	aSecureConfiguration : SecureConfiguration &
		aMaxQoS : REAL
		
	THEN 
		maxQoS := ({aSecureConfiguration} <<| maxQoS)  \/ {(aSecureConfiguration |-> aMaxQoS)}
	END;

	SetRelativeCost(aSecureConfiguration,aRelativeCost) = 
	PRE	aSecureConfiguration : SecureConfiguration &
		aRelativeCost : REAL
		
	THEN 
		relativeCost := ({aSecureConfiguration} <<| relativeCost)  \/ {(aSecureConfiguration |-> aRelativeCost)}
	END;

	SetNameConf(aConfiguration,aNameConf) = 
	PRE	aConfiguration : Configuration &
		aNameConf : STRING
		
	THEN 
		nameConf := ({aConfiguration} <<| nameConf)  \/ {(aConfiguration |-> aNameConf)}
	END;

	SetQoS(aConfiguration,aQoS) = 
	PRE	aConfiguration : Configuration &
		aQoS : REAL
		
	THEN 
		QoS := ({aConfiguration} <<| QoS)  \/ {(aConfiguration |-> aQoS)}
	END;

	SetIsValid(aConfiguration,aIsValid) = 
	PRE	aConfiguration : Configuration &
		aIsValid : BOOL
		
	THEN 
		isValid := ({aConfiguration} <<| isValid)  \/ {(aConfiguration |-> aIsValid)}
	END;

	SetNameInf(aInfrastructure,aNameInf) = 
	PRE	aInfrastructure : Infrastructure &
		aNameInf : STRING
		
	THEN 
		nameInf := ({aInfrastructure} <<| nameInf)  \/ {(aInfrastructure |-> aNameInf)}
	END;

	SetNameApp(aApplication,aNameApp) = 
	PRE	aApplication : Application &
		aNameApp : STRING
		
	THEN 
		nameApp := ({aApplication} <<| nameApp)  \/ {(aApplication |-> aNameApp)}
	END;

	SetNameCMM(aCM,aNameCMM) = 
	PRE	aCM : CM &
		aNameCMM : STRING
		
	THEN 
		nameCMM := ({aCM} <<| nameCMM)  \/ {(aCM |-> aNameCMM)}
	END


END
