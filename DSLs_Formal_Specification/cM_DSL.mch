
/*
 * This file was generated by Meeduse on Monday, February 27, 2023 at 11:05:17 AM CET
 */


MACHINE 
	
	cM_DSL

DEFINITIONS
	


	END_OF_GENERATED_DEFINITIONS_FOR == cM_DSL;
	
	/*
	 * Start of user code DEFINITIONS (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	

SETS
	
	CM_AS;
	INFRASTRUCTURE;
	COMMUNICATION;
	CONFIGURATION;
	APPLICATION;
	ACTION;
	OPTIMISATIONALGO

CONSTANTS
        CM_AS1,
	APPLICATION1,
	APPLICATION2,
	APPLICATION3,
	INFRASTRUCTURE1,
	INFRASTRUCTURE2,
	INFRASTRUCTURE3,
	CONFIGURATION1,
	CONFIGURATION2,
	CONFIGURATION3

PROPERTIES

        APPLICATION1 : APPLICATION &
	APPLICATION2 : APPLICATION &
	APPLICATION3 : APPLICATION &
	INFRASTRUCTURE1 : INFRASTRUCTURE &
	INFRASTRUCTURE2 : INFRASTRUCTURE &
	INFRASTRUCTURE3 : INFRASTRUCTURE &
	CONFIGURATION1 : CONFIGURATION &
	CONFIGURATION2 : CONFIGURATION &
	CONFIGURATION3 : CONFIGURATION &
        card({CONFIGURATION1,CONFIGURATION2,CONFIGURATION3}) = 3 &
	card(CONFIGURATION) >= 3 &
	card({INFRASTRUCTURE1,INFRASTRUCTURE2,INFRASTRUCTURE3}) = 3 &
	card(INFRASTRUCTURE) >= 3 &
	card({APPLICATION1,APPLICATION2,APPLICATION3}) = 3 &
	card(APPLICATION) >= 3 &
	CM_AS1 : CM_AS &
        card({CM_AS1}) = 1 &
	CM_AS /= {}
VARIABLES
	
	CM,
	Infrastructure,
	Communication,
	Configuration,
	Application,
	Action,
	OptimisationAlgo,
	communications,
	infrastructures,
	infr,
	actions,
	opt_algo,
	app,
	configurations,
	applications,
	selectedConf,
	nameCMM,
	nameInf,
	nameConf,
	QoS,
	isValid,
	nameApp

INVARIANT
	
	/*
	 * Start of user code INVARIANT (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	
	CM : FIN(CM_AS) &
	Infrastructure : FIN(INFRASTRUCTURE) &
	Communication : FIN(COMMUNICATION) &
	Configuration : FIN(CONFIGURATION) &
	Application : FIN(APPLICATION) &
	Action : FIN(ACTION) &
	OptimisationAlgo : FIN(OPTIMISATIONALGO) &
	communications : Infrastructure <-> Communication &
	infrastructures : Infrastructure +-> CM &
	infr : Configuration --> Infrastructure &
	actions : Application <-> Action &
	opt_algo : Application +-> OptimisationAlgo &
	app : Configuration --> Application &
	configurations : Configuration +-> CM &
	applications : Application +-> CM &
	selectedConf : CM +-> Configuration &
	nameCMM : CM --> STRING &
	nameInf : Infrastructure --> STRING &
	nameConf : Configuration --> STRING &
	QoS : Configuration --> REAL &
	isValid : Configuration --> BOOL &
	nameApp : Application --> STRING

INITIALISATION

        Configuration := {CONFIGURATION1,CONFIGURATION2,CONFIGURATION3} ||
	Infrastructure := {INFRASTRUCTURE1,INFRASTRUCTURE2,INFRASTRUCTURE3} ||
	Communication := {} ||
	Application := {APPLICATION1,APPLICATION2,APPLICATION3} ||
	Action := {} ||
	OptimisationAlgo := {} ||
	CM := {CM_AS1} ||
	nameConf := {(CONFIGURATION1 |-> "AM2-IM2"),(CONFIGURATION2 |-> "AM3-IM2"),(CONFIGURATION3 |-> "AM1-IM2")} ||
	QoS := {(CONFIGURATION1 |-> 1.0),(CONFIGURATION2 |-> 2.35),(CONFIGURATION3 |-> 0.95)} ||
	isValid := {(CONFIGURATION1 |-> FALSE),(CONFIGURATION2 |-> FALSE),(CONFIGURATION3 |-> FALSE)} ||
	nameInf := {(INFRASTRUCTURE1 |-> "Centralized RTE"),(INFRASTRUCTURE2 |-> "Collaborative Fog"),(INFRASTRUCTURE3 |-> "Hierarchical Fog-Cloud")} ||
	nameApp := {(APPLICATION1 |-> "Fast Action"),(APPLICATION2 |-> "Normal"),(APPLICATION3 |-> "Enhanced Forecasting")} ||
	nameCMM := {(CM_AS1 |-> "RTE Config")} ||
	communications := {} ||
	infr := {(CONFIGURATION1 |-> INFRASTRUCTURE2),(CONFIGURATION2 |-> INFRASTRUCTURE1),(CONFIGURATION3 |-> INFRASTRUCTURE2)} ||
	actions := {} ||
	opt_algo := {} ||
	app := {(CONFIGURATION1 |-> APPLICATION2),(CONFIGURATION2 |-> APPLICATION3),(CONFIGURATION3 |-> APPLICATION1)} ||
	infrastructures := {(INFRASTRUCTURE1 |-> CM_AS1),(INFRASTRUCTURE2 |-> CM_AS1),(INFRASTRUCTURE3 |-> CM_AS1)} ||
	configurations := {(CONFIGURATION1 |-> CM_AS1),(CONFIGURATION2 |-> CM_AS1),(CONFIGURATION3 |-> CM_AS1)} ||
	applications := {(APPLICATION1 |-> CM_AS1),(APPLICATION2 |-> CM_AS1),(APPLICATION3 |-> CM_AS1)} ||
	selectedConf := {(CM_AS1 |-> CONFIGURATION3)}
	


OPERATIONS
	
	/*
	 * Start of user code OPERATIONS (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	
	
	CM_NEW(aCM,aNameCMM) = 
	PRE	aCM : CM_AS &
		aNameCMM : STRING &
		aCM /: CM
		
	THEN 
		CM := CM \/ {aCM} ||
		nameCMM := nameCMM \/ {(aCM |-> aNameCMM)}
	END;

	Infrastructure_NEW(aInfrastructure,aNameInf) = 
	PRE	aInfrastructure : INFRASTRUCTURE &
		aNameInf : STRING &
		aInfrastructure /: Infrastructure
		
	THEN 
		Infrastructure := Infrastructure \/ {aInfrastructure} ||
		nameInf := nameInf \/ {(aInfrastructure |-> aNameInf)}
	END;

	Communication_NEW(aCommunication) = 
	PRE	aCommunication : COMMUNICATION &
		aCommunication /: Communication
		
	THEN 
		Communication := Communication \/ {aCommunication}
	END;

	Configuration_NEW(aConfiguration,aInfr,aApp,aNameConf,aQoS,aIsValid) = 
	PRE	aConfiguration : CONFIGURATION &
		aInfr : Infrastructure &
		aApp : Application &
		aNameConf : STRING &
		aQoS : REAL &
		aIsValid : BOOL &
		aConfiguration /: Configuration
		
	THEN 
		Configuration := Configuration \/ {aConfiguration} ||
		infr := infr \/ {(aConfiguration |-> aInfr)} ||
		app := app \/ {(aConfiguration |-> aApp)} ||
		nameConf := nameConf \/ {(aConfiguration |-> aNameConf)} ||
		QoS := QoS \/ {(aConfiguration |-> aQoS)} ||
		isValid := isValid \/ {(aConfiguration |-> aIsValid)}
	END;

	Application_NEW(aApplication,aNameApp) = 
	PRE	aApplication : APPLICATION &
		aNameApp : STRING &
		aApplication /: Application
		
	THEN 
		Application := Application \/ {aApplication} ||
		nameApp := nameApp \/ {(aApplication |-> aNameApp)}
	END;

	Action_NEW(aAction) = 
	PRE	aAction : ACTION &
		aAction /: Action
		
	THEN 
		Action := Action \/ {aAction}
	END;

	OptimisationAlgo_NEW(aOptimisationAlgo) = 
	PRE	aOptimisationAlgo : OPTIMISATIONALGO &
		aOptimisationAlgo /: OptimisationAlgo
		
	THEN 
		OptimisationAlgo := OptimisationAlgo \/ {aOptimisationAlgo}
	END;

	CM_Free(aCM) = 
	PRE	aCM : CM
		
	THEN 
		CM := CM - {aCM} ||
		infrastructures := infrastructures |>> {aCM} ||
		configurations := configurations |>> {aCM} ||
		applications := applications |>> {aCM} ||
		selectedConf := {aCM} <<| selectedConf ||
		nameCMM := {aCM} <<| nameCMM
	END;

	Infrastructure_Free(aInfrastructure) = 
	PRE	aInfrastructure : Infrastructure &
		infr~[{aInfrastructure}] = {}
		
	THEN 
		Infrastructure := Infrastructure - {aInfrastructure} ||
		communications := {aInfrastructure} <<| communications ||
		infrastructures := {aInfrastructure} <<| infrastructures ||
		infr := infr |>> {aInfrastructure} ||
		nameInf := {aInfrastructure} <<| nameInf
	END;

	Communication_Free(aCommunication) = 
	PRE	aCommunication : Communication
		
	THEN 
		Communication := Communication - {aCommunication} ||
		communications := communications |>> {aCommunication}
	END;

	Configuration_Free(aConfiguration) = 
	PRE	aConfiguration : Configuration
		
	THEN 
		Configuration := Configuration - {aConfiguration} ||
		infr := {aConfiguration} <<| infr ||
		app := {aConfiguration} <<| app ||
		configurations := {aConfiguration} <<| configurations ||
		selectedConf := selectedConf |>> {aConfiguration} ||
		nameConf := {aConfiguration} <<| nameConf ||
		QoS := {aConfiguration} <<| QoS ||
		isValid := {aConfiguration} <<| isValid
	END;

	Application_Free(aApplication) = 
	PRE	aApplication : Application &
		app~[{aApplication}] = {}
		
	THEN 
		Application := Application - {aApplication} ||
		actions := {aApplication} <<| actions ||
		opt_algo := {aApplication} <<| opt_algo ||
		app := app |>> {aApplication} ||
		applications := {aApplication} <<| applications ||
		nameApp := {aApplication} <<| nameApp
	END;

	Action_Free(aAction) = 
	PRE	aAction : Action
		
	THEN 
		Action := Action - {aAction} ||
		actions := actions |>> {aAction}
	END;

	OptimisationAlgo_Free(aOptimisationAlgo) = 
	PRE	aOptimisationAlgo : OptimisationAlgo
		
	THEN 
		OptimisationAlgo := OptimisationAlgo - {aOptimisationAlgo} ||
		opt_algo := opt_algo |>> {aOptimisationAlgo}
	END;

	result <-- GetInfrastructures(aCM) = 
	PRE	aCM : CM &
		aCM : ran(infrastructures)
		
	THEN 
		result := infrastructures~[{aCM}]
	END;

	result <-- GetConfigurations(aCM) = 
	PRE	aCM : CM &
		aCM : ran(configurations)
		
	THEN 
		result := configurations~[{aCM}]
	END;

	result <-- GetApplications(aCM) = 
	PRE	aCM : CM &
		aCM : ran(applications)
		
	THEN 
		result := applications~[{aCM}]
	END;

	result <-- GetSelectedConf(aCM) = 
	PRE	aCM : CM &
		aCM : dom(selectedConf)
		
	THEN 
		result := selectedConf(aCM)
	END;

	result <-- GetCommunications(aInfrastructure) = 
	PRE	aInfrastructure : Infrastructure &
		aInfrastructure : dom(communications)
		
	THEN 
		result := communications[{aInfrastructure}]
	END;

	result <-- GetInfr(aConfiguration) = 
	PRE	aConfiguration : Configuration &
		aConfiguration : dom(infr)
		
	THEN 
		result := infr(aConfiguration)
	END;

	result <-- GetApp(aConfiguration) = 
	PRE	aConfiguration : Configuration &
		aConfiguration : dom(app)
		
	THEN 
		result := app(aConfiguration)
	END;

	result <-- GetActions(aApplication) = 
	PRE	aApplication : Application &
		aApplication : dom(actions)
		
	THEN 
		result := actions[{aApplication}]
	END;

	result <-- GetOpt_algo(aApplication) = 
	PRE	aApplication : Application &
		aApplication : dom(opt_algo)
		
	THEN 
		result := opt_algo(aApplication)
	END;

	SetInfrastructures(aCM,theInfrastructures) = 
	PRE	aCM : CM &
		theInfrastructures : FIN(Infrastructure) &
		(theInfrastructures * {aCM}) /<: infrastructures &
		!added.( added : theInfrastructures => infrastructures[{added}] = {})
		
	THEN 
		infrastructures := (infrastructures |>> {aCM}) \/ (theInfrastructures * {aCM})
	END;

	SetConfigurations(aCM,theConfigurations) = 
	PRE	aCM : CM &
		theConfigurations : FIN(Configuration) &
		(theConfigurations * {aCM}) /<: configurations &
		!added.( added : theConfigurations => configurations[{added}] = {})
		
	THEN 
		configurations := (configurations |>> {aCM}) \/ (theConfigurations * {aCM})
	END;

	SetApplications(aCM,theApplications) = 
	PRE	aCM : CM &
		theApplications : FIN(Application) &
		(theApplications * {aCM}) /<: applications &
		!added.( added : theApplications => applications[{added}] = {})
		
	THEN 
		applications := (applications |>> {aCM}) \/ (theApplications * {aCM})
	END;

	SetSelectedConf(aCM,aSelectedConf) = 
	PRE	aCM : CM &
		aSelectedConf : Configuration &
		{(aCM |-> aSelectedConf)} /<: selectedConf
		
	THEN 
		selectedConf := ({aCM} <<| selectedConf) \/ {(aCM |-> aSelectedConf)}
	END;

	SetCommunications(aInfrastructure,theCommunications) = 
	PRE	aInfrastructure : Infrastructure &
		theCommunications : FIN(Communication) &
		({aInfrastructure} * theCommunications) /<: communications
		
	THEN 
		communications := ({aInfrastructure} <<| communications) \/ ({aInfrastructure} * theCommunications)
	END;

	SetInfr(aConfiguration,aInfr) = 
	PRE	aConfiguration : Configuration &
		aInfr : Infrastructure &
		{(aConfiguration |-> aInfr)} /<: infr
		
	THEN 
		infr := ({aConfiguration} <<| infr) \/ {(aConfiguration |-> aInfr)}
	END;

	SetApp(aConfiguration,aApp) = 
	PRE	aConfiguration : Configuration &
		aApp : Application &
		{(aConfiguration |-> aApp)} /<: app
		
	THEN 
		app := ({aConfiguration} <<| app) \/ {(aConfiguration |-> aApp)}
	END;

	SetActions(aApplication,theActions) = 
	PRE	aApplication : Application &
		theActions : FIN(Action) &
		({aApplication} * theActions) /<: actions
		
	THEN 
		actions := ({aApplication} <<| actions) \/ ({aApplication} * theActions)
	END;

	SetOpt_algo(aApplication,aOpt_algo) = 
	PRE	aApplication : Application &
		aOpt_algo : OptimisationAlgo &
		{(aApplication |-> aOpt_algo)} /<: opt_algo
		
	THEN 
		opt_algo := ({aApplication} <<| opt_algo) \/ {(aApplication |-> aOpt_algo)}
	END;

	UnsetInfrastructures(aCM) = 
	PRE	aCM : CM
		
	THEN 
		infrastructures := infrastructures |>> {aCM}
	END;

	UnsetConfigurations(aCM) = 
	PRE	aCM : CM
		
	THEN 
		configurations := configurations |>> {aCM}
	END;

	UnsetApplications(aCM) = 
	PRE	aCM : CM
		
	THEN 
		applications := applications |>> {aCM}
	END;

	UnsetSelectedConf(aCM) = 
	PRE	aCM : CM
		
	THEN 
		selectedConf := {aCM} <<| selectedConf
	END;

	UnsetCommunications(aInfrastructure) = 
	PRE	aInfrastructure : Infrastructure
		
	THEN 
		communications := {aInfrastructure} <<| communications
	END;

	UnsetActions(aApplication) = 
	PRE	aApplication : Application
		
	THEN 
		actions := {aApplication} <<| actions
	END;

	UnsetOpt_algo(aApplication) = 
	PRE	aApplication : Application
		
	THEN 
		opt_algo := {aApplication} <<| opt_algo
	END;

	AddInfrastructures(aCM,aInfrastructures) = 
	PRE	aCM : CM &
		aInfrastructures : Infrastructure &
		(aInfrastructures |-> aCM) /: infrastructures &
		infrastructures[{aInfrastructures}] = {}
		
	THEN 
		infrastructures := infrastructures \/ {(aInfrastructures |-> aCM)}
	END;

	AddConfigurations(aCM,aConfigurations) = 
	PRE	aCM : CM &
		aConfigurations : Configuration &
		(aConfigurations |-> aCM) /: configurations &
		configurations[{aConfigurations}] = {}
		
	THEN 
		configurations := configurations \/ {(aConfigurations |-> aCM)}
	END;

	AddApplications(aCM,aApplications) = 
	PRE	aCM : CM &
		aApplications : Application &
		(aApplications |-> aCM) /: applications &
		applications[{aApplications}] = {}
		
	THEN 
		applications := applications \/ {(aApplications |-> aCM)}
	END;

	AddCommunications(aInfrastructure,aCommunications) = 
	PRE	aInfrastructure : Infrastructure &
		aCommunications : Communication &
		(aInfrastructure |-> aCommunications) /: communications
		
	THEN 
		communications := communications \/ {(aInfrastructure |-> aCommunications)}
	END;

	AddActions(aApplication,aActions) = 
	PRE	aApplication : Application &
		aActions : Action &
		(aApplication |-> aActions) /: actions
		
	THEN 
		actions := actions \/ {(aApplication |-> aActions)}
	END;

	RemoveInfrastructures(aCM,aInfrastructures) = 
	PRE	aCM : CM &
		aInfrastructures : Infrastructure &
		(aInfrastructures |-> aCM) : infrastructures
		
	THEN 
		infrastructures := infrastructures - {(aInfrastructures |-> aCM)}
	END;

	RemoveConfigurations(aCM,aConfigurations) = 
	PRE	aCM : CM &
		aConfigurations : Configuration &
		(aConfigurations |-> aCM) : configurations
		
	THEN 
		configurations := configurations - {(aConfigurations |-> aCM)}
	END;

	RemoveApplications(aCM,aApplications) = 
	PRE	aCM : CM &
		aApplications : Application &
		(aApplications |-> aCM) : applications
		
	THEN 
		applications := applications - {(aApplications |-> aCM)}
	END;

	RemoveSelectedConf(aCM,aSelectedConf) = 
	PRE	aCM : CM &
		aSelectedConf : Configuration &
		(aCM |-> aSelectedConf) : selectedConf
		
	THEN 
		selectedConf := selectedConf - {(aCM |-> aSelectedConf)}
	END;

	RemoveCommunications(aInfrastructure,aCommunications) = 
	PRE	aInfrastructure : Infrastructure &
		aCommunications : Communication &
		(aInfrastructure |-> aCommunications) : communications
		
	THEN 
		communications := communications - {(aInfrastructure |-> aCommunications)}
	END;

	RemoveActions(aApplication,aActions) = 
	PRE	aApplication : Application &
		aActions : Action &
		(aApplication |-> aActions) : actions
		
	THEN 
		actions := actions - {(aApplication |-> aActions)}
	END;

	RemoveOpt_algo(aApplication,aOpt_algo) = 
	PRE	aApplication : Application &
		aOpt_algo : OptimisationAlgo &
		(aApplication |-> aOpt_algo) : opt_algo
		
	THEN 
		opt_algo := opt_algo - {(aApplication |-> aOpt_algo)}
	END;

	result <-- GetNameCMM(aCM) = 
	PRE	aCM : CM &
		aCM : dom(nameCMM)
		
	THEN 
		result := nameCMM(aCM)
	END;

	result <-- GetNameInf(aInfrastructure) = 
	PRE	aInfrastructure : Infrastructure &
		aInfrastructure : dom(nameInf)
		
	THEN 
		result := nameInf(aInfrastructure)
	END;

	result <-- GetNameConf(aConfiguration) = 
	PRE	aConfiguration : Configuration &
		aConfiguration : dom(nameConf)
		
	THEN 
		result := nameConf(aConfiguration)
	END;

	result <-- GetQoS(aConfiguration) = 
	PRE	aConfiguration : Configuration &
		aConfiguration : dom(QoS)
		
	THEN 
		result := QoS(aConfiguration)
	END;

	result <-- GetIsValid(aConfiguration) = 
	PRE	aConfiguration : Configuration &
		aConfiguration : dom(isValid)
		
	THEN 
		result := isValid(aConfiguration)
	END;

	result <-- GetNameApp(aApplication) = 
	PRE	aApplication : Application &
		aApplication : dom(nameApp)
		
	THEN 
		result := nameApp(aApplication)
	END;

	SetNameCMM(aCM,aNameCMM) = 
	PRE	aCM : CM &
		aNameCMM : STRING
		
	THEN 
		nameCMM := ({aCM} <<| nameCMM)  \/ {(aCM |-> aNameCMM)}
	END;

	SetNameInf(aInfrastructure,aNameInf) = 
	PRE	aInfrastructure : Infrastructure &
		aNameInf : STRING
		
	THEN 
		nameInf := ({aInfrastructure} <<| nameInf)  \/ {(aInfrastructure |-> aNameInf)}
	END;

	SetNameConf(aConfiguration,aNameConf) = 
	PRE	aConfiguration : Configuration &
		aNameConf : STRING
		
	THEN 
		nameConf := ({aConfiguration} <<| nameConf)  \/ {(aConfiguration |-> aNameConf)}
	END;

	SetQoS(aConfiguration,aQoS) = 
	PRE	aConfiguration : Configuration &
		aQoS : REAL
		
	THEN 
		QoS := ({aConfiguration} <<| QoS)  \/ {(aConfiguration |-> aQoS)}
	END;

	SetIsValid(aConfiguration,aIsValid) = 
	PRE	aConfiguration : Configuration &
		aIsValid : BOOL
		
	THEN 
		isValid := ({aConfiguration} <<| isValid)  \/ {(aConfiguration |-> aIsValid)}
	END;

	SetNameApp(aApplication,aNameApp) = 
	PRE	aApplication : Application &
		aNameApp : STRING
		
	THEN 
		nameApp := ({aApplication} <<| nameApp)  \/ {(aApplication |-> aNameApp)}
	END


END
