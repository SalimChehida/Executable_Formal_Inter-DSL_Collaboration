
/*
 * This file was generated by Meeduse on Monday, February 27, 2023 at 11:26:28 AM CET
 */


MACHINE 
	
	sRA_DSL

DEFINITIONS
	


	END_OF_GENERATED_DEFINITIONS_FOR == sRA_DSL;
	
	/*
	 * Start of user code DEFINITIONS (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	

SETS
	
	SRA_AS;
	THREAT;
	DEFENSE;
	ENTRY

CONSTANTS
        ENTRY1,
	ENTRY2,
	ENTRY3,
	ENTRY4,
	ENTRY5,
	ENTRY6,
	ENTRY7,
	ENTRY8,
	ENTRY9,
	ENTRY10,
	ENTRY11,
	ENTRY12,
	ENTRY13,
	ENTRY14,
	ENTRY15,
	ENTRY16,
	DEFENSE1,
	DEFENSE2,
	DEFENSE3,
	DEFENSE4,
	DEFENSE5,
	THREAT1,
	THREAT2,
	THREAT3,
	THREAT4,
	THREAT5,
	THREAT6,
	THREAT7,
	THREAT8,
	SRA_AS1

PROPERTIES
        ENTRY1 : ENTRY &
	ENTRY2 : ENTRY &
	ENTRY3 : ENTRY &
	ENTRY4 : ENTRY &
	ENTRY5 : ENTRY &
	ENTRY6 : ENTRY &
	ENTRY7 : ENTRY &
	ENTRY8 : ENTRY &
	ENTRY9 : ENTRY &
	ENTRY10 : ENTRY &
	ENTRY11 : ENTRY &
	ENTRY12 : ENTRY &
	ENTRY13 : ENTRY &
	ENTRY14 : ENTRY &
	ENTRY15 : ENTRY &
	ENTRY16 : ENTRY &
	DEFENSE1 : DEFENSE &
	DEFENSE2 : DEFENSE &
	DEFENSE3 : DEFENSE &
	DEFENSE4 : DEFENSE &
	DEFENSE5 : DEFENSE &
	THREAT1 : THREAT &
	THREAT2 : THREAT &
	THREAT3 : THREAT &
	THREAT4 : THREAT &
	THREAT5 : THREAT &
	THREAT6 : THREAT &
	THREAT7 : THREAT &
	THREAT8 : THREAT &
	SRA_AS1 : SRA_AS &
	card({SRA_AS1}) = 1 &
	SRA_AS /= {} &
	card({THREAT1,THREAT2,THREAT3,THREAT4,THREAT5,THREAT6,THREAT7,THREAT8}) = 8 &
	card(THREAT) >= 8 &
	card({DEFENSE1,DEFENSE2,DEFENSE3,DEFENSE4,DEFENSE5}) = 5 &
	card(DEFENSE) >= 5 &
	card({ENTRY1,ENTRY2,ENTRY3,ENTRY4,ENTRY5,ENTRY6,ENTRY7,ENTRY8,ENTRY9,ENTRY10,ENTRY11,ENTRY12,ENTRY13,ENTRY14,ENTRY15,ENTRY16}) = 16 &
	card(ENTRY) >= 16 
VARIABLES
	
	SRA,
	Threat,
	Defense,
	Entry,
	AND,
	
	/*
	 * Renamed class (alias for sRA_DSL::OR)
	 */
	Or,
	NOT,
	threats,
	defenses,
	compDefenses,
	subThreats,
	defs,
	thrs,
	entry,
	entryAnd,
	entryOr,
	entryNot,
	nameSRAM,
	nameTh,
	nameDef,
	costDef

INVARIANT
	
	/*
	 * Start of user code INVARIANT (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	
	SRA : FIN(SRA_AS) &
	Threat : FIN(THREAT) &
	Defense : FIN(DEFENSE) &
	Entry : FIN(ENTRY) &
	AND <: Entry &
	Or <: Entry &
	NOT <: Entry &
	threats : Threat +-> SRA &
	defenses : Defense +-> SRA &
	compDefenses : SRA <-> Defense &
	subThreats : SRA <-> Threat &
	defs : Entry <-> Defense &
	thrs : Entry <-> Threat &
	entry : SRA >+> Entry &
	entryAnd : Entry +-> AND &
	entryOr : Entry +-> Or &
	entryNot : NOT >+> Entry &
	nameSRAM : SRA --> STRING &
	nameTh : Threat --> STRING &
	nameDef : Defense --> STRING &
	costDef : Defense --> REAL &
	AND /\ Or = {} &
	AND /\ NOT = {} &
	Or /\ NOT = {}

INITIALISATION

        SRA := {SRA_AS1} ||
	Threat := {THREAT1,THREAT2,THREAT3,THREAT4,THREAT5,THREAT6,THREAT7,THREAT8} ||
	Defense := {DEFENSE1,DEFENSE2,DEFENSE3,DEFENSE4,DEFENSE5} ||
	Entry := {ENTRY1,ENTRY2,ENTRY3,ENTRY4,ENTRY5,ENTRY6,ENTRY7,ENTRY8,ENTRY9,ENTRY10,ENTRY11,ENTRY12,ENTRY13,ENTRY14,ENTRY15,ENTRY16} ||
	AND := {ENTRY2,ENTRY5,ENTRY8,ENTRY11,ENTRY14} ||
	Or := {ENTRY1,ENTRY4,ENTRY6,ENTRY10,ENTRY13,ENTRY16} ||
	NOT := {ENTRY3,ENTRY7,ENTRY9,ENTRY12,ENTRY15} ||
	nameSRAM := {(SRA_AS1 |-> "RTE sec model")} ||
	nameTh := {(THREAT1 |-> "T1"),(THREAT2 |-> "T2"),(THREAT3 |-> "T3"),(THREAT4 |-> "T4"),(THREAT5 |-> "T5"),(THREAT6 |-> "T6"),(THREAT7 |-> "T7"),(THREAT8 |-> "T8")} ||
	nameDef := {(DEFENSE1 |-> "D1"),(DEFENSE2 |-> "D2"),(DEFENSE3 |-> "D3"),(DEFENSE4 |-> "D4"),(DEFENSE5 |-> "D5")} ||
	costDef := {(DEFENSE1 |-> 0.4),(DEFENSE2 |-> 0.1),(DEFENSE3 |-> 0.3),(DEFENSE4 |-> 0.05),(DEFENSE5 |-> 0.01)} ||
	threats := {(THREAT1 |-> SRA_AS1),(THREAT2 |-> SRA_AS1),(THREAT3 |-> SRA_AS1),(THREAT4 |-> SRA_AS1),(THREAT5 |-> SRA_AS1),(THREAT6 |-> SRA_AS1),(THREAT7 |-> SRA_AS1),(THREAT8 |-> SRA_AS1)} ||
	defenses := {(DEFENSE1 |-> SRA_AS1),(DEFENSE2 |-> SRA_AS1),(DEFENSE3 |-> SRA_AS1),(DEFENSE4 |-> SRA_AS1),(DEFENSE5 |-> SRA_AS1)} ||
	compDefenses := {} ||
	subThreats := {} ||
	defs := {(ENTRY3 |-> DEFENSE1),(ENTRY7 |-> DEFENSE3),(ENTRY9 |-> DEFENSE2),(ENTRY12 |-> DEFENSE4),(ENTRY15 |-> DEFENSE5)} ||
	thrs := {(ENTRY4 |-> THREAT7),(ENTRY6 |-> THREAT1),(ENTRY6 |-> THREAT3),(ENTRY6 |-> THREAT4),(ENTRY6 |-> THREAT5),(ENTRY10 |-> THREAT5),(ENTRY10 |-> THREAT6),(ENTRY10 |-> THREAT7),(ENTRY13 |-> THREAT2),(ENTRY13 |-> THREAT3),(ENTRY13 |-> THREAT4),(ENTRY13 |-> THREAT8),(ENTRY16 |-> THREAT2),(ENTRY16 |-> THREAT3),(ENTRY16 |-> THREAT6),(ENTRY16 |-> THREAT7),(ENTRY16 |-> THREAT8)} ||
	entry := {(SRA_AS1 |-> ENTRY1)} ||
	entryAnd := {(ENTRY3 |-> ENTRY2),(ENTRY4 |-> ENTRY2),(ENTRY6 |-> ENTRY5),(ENTRY7 |-> ENTRY5),(ENTRY9 |-> ENTRY8),(ENTRY10 |-> ENTRY8),(ENTRY12 |-> ENTRY11),(ENTRY13 |-> ENTRY11),(ENTRY15 |-> ENTRY14),(ENTRY16 |-> ENTRY14)} ||
	entryOr := {(ENTRY2 |-> ENTRY1),(ENTRY8 |-> ENTRY1),(ENTRY11 |-> ENTRY1),(ENTRY14 |-> ENTRY1),(ENTRY5 |-> ENTRY4)} ||
	entryNot := {} 

	
	

OPERATIONS
	
	/*
	 * Start of user code OPERATIONS (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	
	
	SRA_NEW(aSRA,aNameSRAM) = 
	PRE	aSRA : SRA_AS &
		aNameSRAM : STRING &
		aSRA /: SRA
		
	THEN 
		SRA := SRA \/ {aSRA} ||
		nameSRAM := nameSRAM \/ {(aSRA |-> aNameSRAM)}
	END;

	Threat_NEW(aThreat,aNameTh) = 
	PRE	aThreat : THREAT &
		aNameTh : STRING &
		aThreat /: Threat
		
	THEN 
		Threat := Threat \/ {aThreat} ||
		nameTh := nameTh \/ {(aThreat |-> aNameTh)}
	END;

	Defense_NEW(aDefense,aNameDef,aCostDef) = 
	PRE	aDefense : DEFENSE &
		aNameDef : STRING &
		aCostDef : REAL &
		aDefense /: Defense
		
	THEN 
		Defense := Defense \/ {aDefense} ||
		nameDef := nameDef \/ {(aDefense |-> aNameDef)} ||
		costDef := costDef \/ {(aDefense |-> aCostDef)}
	END;

	AND_NEW(aAND) = 
	PRE	aAND : ENTRY &
		aAND /: Entry
		
	THEN 
		AND := AND \/ {aAND} ||
		Entry := Entry \/ {aAND}
	END;

	Or_NEW(aOr) = 
	PRE	aOr : ENTRY &
		aOr /: Entry
		
	THEN 
		Or := Or \/ {aOr} ||
		Entry := Entry \/ {aOr}
	END;

	NOT_NEW(aNOT) = 
	PRE	aNOT : ENTRY &
		aNOT /: Entry
		
	THEN 
		NOT := NOT \/ {aNOT} ||
		Entry := Entry \/ {aNOT}
	END;

	SRA_Free(aSRA) = 
	PRE	aSRA : SRA
		
	THEN 
		SRA := SRA - {aSRA} ||
		threats := threats |>> {aSRA} ||
		defenses := defenses |>> {aSRA} ||
		compDefenses := {aSRA} <<| compDefenses ||
		subThreats := {aSRA} <<| subThreats ||
		entry := {aSRA} <<| entry ||
		nameSRAM := {aSRA} <<| nameSRAM
	END;

	Threat_Free(aThreat) = 
	PRE	aThreat : Threat
		
	THEN 
		Threat := Threat - {aThreat} ||
		threats := {aThreat} <<| threats ||
		subThreats := subThreats |>> {aThreat} ||
		thrs := thrs |>> {aThreat} ||
		nameTh := {aThreat} <<| nameTh
	END;

	Defense_Free(aDefense) = 
	PRE	aDefense : Defense
		
	THEN 
		Defense := Defense - {aDefense} ||
		defenses := {aDefense} <<| defenses ||
		compDefenses := compDefenses |>> {aDefense} ||
		defs := defs |>> {aDefense} ||
		nameDef := {aDefense} <<| nameDef ||
		costDef := {aDefense} <<| costDef
	END;

	AND_Free(aAND) = 
	PRE	aAND : AND
		
	THEN 
		AND := AND - {aAND} ||
		Entry := Entry - {aAND} ||
		defs := {aAND} <<| defs ||
		thrs := {aAND} <<| thrs ||
		entry := entry |>> {aAND} ||
		entryAnd := ({aAND} <<| entryAnd) |>> {aAND} ||
		entryOr := {aAND} <<| entryOr ||
		entryNot := entryNot |>> {aAND}
	END;

	Or_Free(aOr) = 
	PRE	aOr : Or
		
	THEN 
		Or := Or - {aOr} ||
		Entry := Entry - {aOr} ||
		defs := {aOr} <<| defs ||
		thrs := {aOr} <<| thrs ||
		entry := entry |>> {aOr} ||
		entryAnd := {aOr} <<| entryAnd ||
		entryOr := ({aOr} <<| entryOr) |>> {aOr} ||
		entryNot := entryNot |>> {aOr}
	END;

	NOT_Free(aNOT) = 
	PRE	aNOT : NOT
		
	THEN 
		NOT := NOT - {aNOT} ||
		Entry := Entry - {aNOT} ||
		defs := {aNOT} <<| defs ||
		thrs := {aNOT} <<| thrs ||
		entry := entry |>> {aNOT} ||
		entryAnd := {aNOT} <<| entryAnd ||
		entryOr := {aNOT} <<| entryOr ||
		entryNot := {aNOT} <<| (entryNot |>> {aNOT})
	END;

	result <-- GetThreats(aSRA) = 
	PRE	aSRA : SRA &
		aSRA : ran(threats)
		
	THEN 
		result := threats~[{aSRA}]
	END;

	result <-- GetDefenses(aSRA) = 
	PRE	aSRA : SRA &
		aSRA : ran(defenses)
		
	THEN 
		result := defenses~[{aSRA}]
	END;

	result <-- GetCompDefenses(aSRA) = 
	PRE	aSRA : SRA &
		aSRA : dom(compDefenses)
		
	THEN 
		result := compDefenses[{aSRA}]
	END;

	result <-- GetSubThreats(aSRA) = 
	PRE	aSRA : SRA &
		aSRA : dom(subThreats)
		
	THEN 
		result := subThreats[{aSRA}]
	END;

	result <-- GetEntry(aSRA) = 
	PRE	aSRA : SRA &
		aSRA : dom(entry)
		
	THEN 
		result := entry(aSRA)
	END;

	result <-- GetDefs(aEntry) = 
	PRE	aEntry : Entry &
		aEntry : dom(defs)
		
	THEN 
		result := defs[{aEntry}]
	END;

	result <-- GetThrs(aEntry) = 
	PRE	aEntry : Entry &
		aEntry : dom(thrs)
		
	THEN 
		result := thrs[{aEntry}]
	END;

	result <-- GetEntryAnd(aAND) = 
	PRE	aAND : AND &
		aAND : ran(entryAnd)
		
	THEN 
		result := entryAnd~[{aAND}]
	END;

	result <-- GetEntryOr(aOr) = 
	PRE	aOr : Or &
		aOr : ran(entryOr)
		
	THEN 
		result := entryOr~[{aOr}]
	END;

	result <-- GetEntryNot(aNOT) = 
	PRE	aNOT : NOT &
		aNOT : dom(entryNot)
		
	THEN 
		result := entryNot(aNOT)
	END;

	SetThreats(aSRA,theThreats) = 
	PRE	aSRA : SRA &
		theThreats : FIN(Threat) &
		(theThreats * {aSRA}) /<: threats &
		!added.( added : theThreats => threats[{added}] = {})
		
	THEN 
		threats := (threats |>> {aSRA}) \/ (theThreats * {aSRA})
	END;

	SetDefenses(aSRA,theDefenses) = 
	PRE	aSRA : SRA &
		theDefenses : FIN(Defense) &
		(theDefenses * {aSRA}) /<: defenses &
		!added.( added : theDefenses => defenses[{added}] = {})
		
	THEN 
		defenses := (defenses |>> {aSRA}) \/ (theDefenses * {aSRA})
	END;

	SetCompDefenses(aSRA,theCompDefenses) = 
	PRE	aSRA : SRA &
		theCompDefenses : FIN(Defense) &
		({aSRA} * theCompDefenses) /<: compDefenses
		
	THEN 
		compDefenses := ({aSRA} <<| compDefenses) \/ ({aSRA} * theCompDefenses)
	END;

	SetSubThreats(aSRA,theSubThreats) = 
	PRE	aSRA : SRA &
		theSubThreats : FIN(Threat) &
		({aSRA} * theSubThreats) /<: subThreats
		
	THEN 
		subThreats := ({aSRA} <<| subThreats) \/ ({aSRA} * theSubThreats)
	END;

	SetEntry(aSRA,aEntry) = 
	PRE	aSRA : SRA &
		aEntry : Entry &
		{(aSRA |-> aEntry)} /<: entry &
		entry~[{aEntry}] = {}
		
	THEN 
		entry := ({aSRA} <<| entry) \/ {(aSRA |-> aEntry)}
	END;

	SetDefs(aEntry,theDefs) = 
	PRE	aEntry : Entry &
		theDefs : FIN(Defense) &
		({aEntry} * theDefs) /<: defs
		
	THEN 
		defs := ({aEntry} <<| defs) \/ ({aEntry} * theDefs)
	END;

	SetThrs(aEntry,theThrs) = 
	PRE	aEntry : Entry &
		theThrs : FIN(Threat) &
		({aEntry} * theThrs) /<: thrs
		
	THEN 
		thrs := ({aEntry} <<| thrs) \/ ({aEntry} * theThrs)
	END;

	SetEntryAnd(aAND,theEntryAnd) = 
	PRE	aAND : AND &
		theEntryAnd : FIN(Entry) &
		(theEntryAnd * {aAND}) /<: entryAnd &
		!added.( added : theEntryAnd => entryAnd[{added}] = {})
		
	THEN 
		entryAnd := (entryAnd |>> {aAND}) \/ (theEntryAnd * {aAND})
	END;

	SetEntryOr(aOr,theEntryOr) = 
	PRE	aOr : Or &
		theEntryOr : FIN(Entry) &
		(theEntryOr * {aOr}) /<: entryOr &
		!added.( added : theEntryOr => entryOr[{added}] = {})
		
	THEN 
		entryOr := (entryOr |>> {aOr}) \/ (theEntryOr * {aOr})
	END;

	SetEntryNot(aNOT,aEntryNot) = 
	PRE	aNOT : NOT &
		aEntryNot : Entry &
		{(aNOT |-> aEntryNot)} /<: entryNot &
		entryNot~[{aEntryNot}] = {}
		
	THEN 
		entryNot := ({aNOT} <<| entryNot) \/ {(aNOT |-> aEntryNot)}
	END;

	UnsetThreats(aSRA) = 
	PRE	aSRA : SRA
		
	THEN 
		threats := threats |>> {aSRA}
	END;

	UnsetDefenses(aSRA) = 
	PRE	aSRA : SRA
		
	THEN 
		defenses := defenses |>> {aSRA}
	END;

	UnsetCompDefenses(aSRA) = 
	PRE	aSRA : SRA
		
	THEN 
		compDefenses := {aSRA} <<| compDefenses
	END;

	UnsetSubThreats(aSRA) = 
	PRE	aSRA : SRA
		
	THEN 
		subThreats := {aSRA} <<| subThreats
	END;

	UnsetEntry(aSRA) = 
	PRE	aSRA : SRA
		
	THEN 
		entry := {aSRA} <<| entry
	END;

	UnsetDefs(aEntry) = 
	PRE	aEntry : Entry
		
	THEN 
		defs := {aEntry} <<| defs
	END;

	UnsetThrs(aEntry) = 
	PRE	aEntry : Entry
		
	THEN 
		thrs := {aEntry} <<| thrs
	END;

	UnsetEntryAnd(aAND) = 
	PRE	aAND : AND
		
	THEN 
		entryAnd := entryAnd |>> {aAND}
	END;

	UnsetEntryOr(aOr) = 
	PRE	aOr : Or
		
	THEN 
		entryOr := entryOr |>> {aOr}
	END;

	UnsetEntryNot(aNOT) = 
	PRE	aNOT : NOT
		
	THEN 
		entryNot := {aNOT} <<| entryNot
	END;

	AddThreats(aSRA,aThreats) = 
	PRE	aSRA : SRA &
		aThreats : Threat &
		(aThreats |-> aSRA) /: threats &
		threats[{aThreats}] = {}
		
	THEN 
		threats := threats \/ {(aThreats |-> aSRA)}
	END;

	AddDefenses(aSRA,aDefenses) = 
	PRE	aSRA : SRA &
		aDefenses : Defense &
		(aDefenses |-> aSRA) /: defenses &
		defenses[{aDefenses}] = {}
		
	THEN 
		defenses := defenses \/ {(aDefenses |-> aSRA)}
	END;

	AddCompDefenses(aSRA,aCompDefenses) = 
	PRE	aSRA : SRA &
		aCompDefenses : Defense &
		(aSRA |-> aCompDefenses) /: compDefenses
		
	THEN 
		compDefenses := compDefenses \/ {(aSRA |-> aCompDefenses)}
	END;

	AddSubThreats(aSRA,aSubThreats) = 
	PRE	aSRA : SRA &
		aSubThreats : Threat &
		(aSRA |-> aSubThreats) /: subThreats
		
	THEN 
		subThreats := subThreats \/ {(aSRA |-> aSubThreats)}
	END;

	AddDefs(aEntry,aDefs) = 
	PRE	aEntry : Entry &
		aDefs : Defense &
		(aEntry |-> aDefs) /: defs
		
	THEN 
		defs := defs \/ {(aEntry |-> aDefs)}
	END;

	AddThrs(aEntry,aThrs) = 
	PRE	aEntry : Entry &
		aThrs : Threat &
		(aEntry |-> aThrs) /: thrs
		
	THEN 
		thrs := thrs \/ {(aEntry |-> aThrs)}
	END;

	AddEntryAnd(aAND,aEntryAnd) = 
	PRE	aAND : AND &
		aEntryAnd : Entry &
		(aEntryAnd |-> aAND) /: entryAnd &
		entryAnd[{aEntryAnd}] = {}
		
	THEN 
		entryAnd := entryAnd \/ {(aEntryAnd |-> aAND)}
	END;

	AddEntryOr(aOr,aEntryOr) = 
	PRE	aOr : Or &
		aEntryOr : Entry &
		(aEntryOr |-> aOr) /: entryOr &
		entryOr[{aEntryOr}] = {}
		
	THEN 
		entryOr := entryOr \/ {(aEntryOr |-> aOr)}
	END;

	RemoveThreats(aSRA,aThreats) = 
	PRE	aSRA : SRA &
		aThreats : Threat &
		(aThreats |-> aSRA) : threats
		
	THEN 
		threats := threats - {(aThreats |-> aSRA)}
	END;

	RemoveDefenses(aSRA,aDefenses) = 
	PRE	aSRA : SRA &
		aDefenses : Defense &
		(aDefenses |-> aSRA) : defenses
		
	THEN 
		defenses := defenses - {(aDefenses |-> aSRA)}
	END;

	RemoveCompDefenses(aSRA,aCompDefenses) = 
	PRE	aSRA : SRA &
		aCompDefenses : Defense &
		(aSRA |-> aCompDefenses) : compDefenses
		
	THEN 
		compDefenses := compDefenses - {(aSRA |-> aCompDefenses)}
	END;

	RemoveSubThreats(aSRA,aSubThreats) = 
	PRE	aSRA : SRA &
		aSubThreats : Threat &
		(aSRA |-> aSubThreats) : subThreats
		
	THEN 
		subThreats := subThreats - {(aSRA |-> aSubThreats)}
	END;

	RemoveEntry(aSRA,aEntry) = 
	PRE	aSRA : SRA &
		aEntry : Entry &
		(aSRA |-> aEntry) : entry
		
	THEN 
		entry := entry - {(aSRA |-> aEntry)}
	END;

	RemoveDefs(aEntry,aDefs) = 
	PRE	aEntry : Entry &
		aDefs : Defense &
		(aEntry |-> aDefs) : defs
		
	THEN 
		defs := defs - {(aEntry |-> aDefs)}
	END;

	RemoveThrs(aEntry,aThrs) = 
	PRE	aEntry : Entry &
		aThrs : Threat &
		(aEntry |-> aThrs) : thrs
		
	THEN 
		thrs := thrs - {(aEntry |-> aThrs)}
	END;

	RemoveEntryAnd(aAND,aEntryAnd) = 
	PRE	aAND : AND &
		aEntryAnd : Entry &
		(aEntryAnd |-> aAND) : entryAnd
		
	THEN 
		entryAnd := entryAnd - {(aEntryAnd |-> aAND)}
	END;

	RemoveEntryOr(aOr,aEntryOr) = 
	PRE	aOr : Or &
		aEntryOr : Entry &
		(aEntryOr |-> aOr) : entryOr
		
	THEN 
		entryOr := entryOr - {(aEntryOr |-> aOr)}
	END;

	RemoveEntryNot(aNOT,aEntryNot) = 
	PRE	aNOT : NOT &
		aEntryNot : Entry &
		(aNOT |-> aEntryNot) : entryNot
		
	THEN 
		entryNot := entryNot - {(aNOT |-> aEntryNot)}
	END;

	result <-- GetNameSRAM(aSRA) = 
	PRE	aSRA : SRA &
		aSRA : dom(nameSRAM)
		
	THEN 
		result := nameSRAM(aSRA)
	END;

	result <-- GetNameTh(aThreat) = 
	PRE	aThreat : Threat &
		aThreat : dom(nameTh)
		
	THEN 
		result := nameTh(aThreat)
	END;

	result <-- GetNameDef(aDefense) = 
	PRE	aDefense : Defense &
		aDefense : dom(nameDef)
		
	THEN 
		result := nameDef(aDefense)
	END;

	result <-- GetCostDef(aDefense) = 
	PRE	aDefense : Defense &
		aDefense : dom(costDef)
		
	THEN 
		result := costDef(aDefense)
	END;

	SetNameSRAM(aSRA,aNameSRAM) = 
	PRE	aSRA : SRA &
		aNameSRAM : STRING
		
	THEN 
		nameSRAM := ({aSRA} <<| nameSRAM)  \/ {(aSRA |-> aNameSRAM)}
	END;

	SetNameTh(aThreat,aNameTh) = 
	PRE	aThreat : Threat &
		aNameTh : STRING
		
	THEN 
		nameTh := ({aThreat} <<| nameTh)  \/ {(aThreat |-> aNameTh)}
	END;

	SetNameDef(aDefense,aNameDef) = 
	PRE	aDefense : Defense &
		aNameDef : STRING
		
	THEN 
		nameDef := ({aDefense} <<| nameDef)  \/ {(aDefense |-> aNameDef)}
	END;

	SetCostDef(aDefense,aCostDef) = 
	PRE	aDefense : Defense &
		aCostDef : REAL
		
	THEN 
		costDef := ({aDefense} <<| costDef)  \/ {(aDefense |-> aCostDef)}
	END


END
